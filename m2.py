import pandas as pd
import warnings
from sklearn.cluster import KMeans
from sklearn.utils import shuffle
import matplotlib.pyplot as plt
warnings.filterwarnings("ignore")
data = pd.read_csv('data/SpotifyFeatures.csv')
selfdata = pd.read_csv('data/SpotifyFeatures2.csv')
data = shuffle(data)


X = data.iloc[[i for i in range(0, 100000)]]
Y = data.iloc[[i for i in range(100000, data.shape[0])]]
X = shuffle(X)
Y = shuffle(Y)
l=[]
X1 = data.iloc[[i for i in range(0, 1000)]]

kmeans = KMeans(n_clusters=8, n_init = 100)
kmeans.fit(X)
X['label'] = kmeans.labels_
t = (X, kmeans)
y_pred = t[1].predict(Y)
recommendations = t[0][t[0]['label'] == pd.Series(y_pred).mode().loc[0]]
output = selfdata.loc[recommendations['id']]
print output[['track_id','genre','popularity']]

cluster = []
cluster_stat = dict()
# Print tweets that belong to cluster 2
for idx, cls in enumerate(kmeans.labels_):
    if cls in cluster_stat:
        cluster_stat[cls] += 1
    else:
        cluster_stat[cls] = 1

print 'basic information about the clusters that are generated by the k-means clustering algorithm: \r\n'
print 'total number of clusters: {0}\r\n'.format(len(cluster_stat))
for cls, count in cluster_stat.items():
    print 'cluster {0} has {1} tweets'.format(cls, count)

for i in range(1,11):
    k = KMeans(n_clusters = i, n_init = 100)
    k.fit(X1)
    l.append(k.inertia_)

plt.plot(range(1, 11), l)
plt.title(' elbow method')
plt.xlabel('Number of clusters')
plt.ylabel('l')
plt.show()